//ror.vp
//;
//; use strict ;                   # Use a strict interpretation
//; use warnings FATAL=>qw(all);   # Turn warnings into errors
//; use diagnostics ;              # Print helpful info, for errors
//; use POSIX qw(ceil);
//; sub clog2{ return int( ceil( log( shift ) / log(2) ) ) ;}

//; my $bW = parameter( name=>"bitWidth", val=>16) ;
//; my $aW = parameter( name=>"shiftWidth", val=>clog2($bW));
module `mname`
   (
    input  logic [`$bW-1`:0] a,
    input  logic [`$aW-1`:0] b,
    output logic [`$bW-1`:0] z 
    );

	logic [15:0] a2[`$aW+1`];
  assign a2[0] = a;
 	//; for (my $i=1; $i <= $aW ; $i++ ) {
	assign a2[`$i`] = b[`$i-1`] ? {a2[`$i-1`][`(2 ** ($i-1))-1`:0], a2[`$i-1`][`$bW-1`:`2 ** ($i-1)`]} : a2[`$i-1`];
 	//;}

	assign z = a2[`$aW`];		

   
endmodule 
